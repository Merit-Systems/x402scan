generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  admin
  user
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  role                    Role                     @default(user)
  accounts                Account[]
  sessions                Session[]
  onrampSessions          OnrampSession[]
  serverWallets           ServerWallet[]
  chats                   Chat[]
  agentConfigurations     AgentConfiguration[]
  agentConfigurationUsers AgentConfigurationUser[]
  UserAcknowledgement     UserAcknowledgement?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum ResourceType {
  http
}

model Resources {
  id          String       @id @default(uuid())
  resource    String       @unique
  type        ResourceType
  x402Version Int
  lastUpdated DateTime
  metadata    Json?

  originId String

  accepts                     Accepts[]
  response                    ResourceResponse?
  invocations                 ResourceInvocation[]
  origin                      ResourceOrigin               @relation(fields: [originId], references: [id], map: "Resources_origin_fkey")
  agentConfigurationResources AgentConfigurationResource[]
  tags                        ResourcesTags[]
  requestMetadata             ResourceRequestMetadata?
  toolCalls                   ToolCall[]
  excluded                    ExcludedResource?
}

enum AcceptsScheme {
  exact
}

enum AcceptsNetwork {
  base_sepolia
  avalanche_fuji
  base
  sei
  sei_testnet
  avalanche
  iotex
  solana_devnet
  solana
  polygon
  optimism
}

model Accepts {
  id                String         @id @default(uuid())
  resourceId        String
  scheme            AcceptsScheme
  description       String
  network           AcceptsNetwork
  maxAmountRequired BigInt
  resource          String
  mimeType          String
  payTo             String
  maxTimeoutSeconds Int
  asset             String
  outputSchema      Json?
  extra             Json?

  resourceRel Resources @relation(fields: [resourceId], references: [id])

  @@unique([resourceId, scheme, network])
}

model News {
  id          String   @id @default(uuid())
  title       String
  description String
  image       String
  link        String
  favicon     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ResourceOrigin {
  id     String @id @default(uuid())
  origin String @unique

  title       String?
  description String?
  favicon     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  resources Resources[]
  ogImages  OgImage[]
}

model ResourceResponse {
  id         String @id @default(uuid())
  resourceId String @unique
  response   Json

  resource Resources @relation(fields: [resourceId], references: [id])
}

model ResourceInvocation {
  id                  String   @id @default(uuid())
  resourceId          String?
  statusCode          Int
  duration            Int
  statusText          String
  method              String
  url                 String
  requestContentType  String
  responseContentType String
  responseHeaders     Json?
  responseBody        Json?
  requestHeaders      Json?
  requestBody         Json?
  createdAt           DateTime @default(now())

  resource Resources? @relation(fields: [resourceId], references: [id])
}

model ResourceRequestMetadata {
  id          String @id @default(uuid())
  resourceId  String @unique
  headers     Json
  body        Json
  queryParams Json
  inputSchema Json

  resource Resources @relation(fields: [resourceId], references: [id])

  @@map("ResourceRequestMetadata")
}

model OgImage {
  id          String  @id @default(uuid())
  originId    String
  url         String  @unique
  height      Int?
  width       Int?
  title       String?
  description String?

  origin ResourceOrigin @relation(fields: [originId], references: [id], map: "OgImage_origin_fkey")

  @@unique([originId, url])
}

model OnrampSession {
  id             String        @id @default(uuid())
  token          String        @unique
  amount         Int
  userId         String
  date           DateTime      @default(now())
  txHash         String?       @unique
  failureReason  String?
  serverWalletId String?
  status         SessionStatus @default(ONRAMP_TRANSACTION_STATUS_IN_PROGRESS)

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  serverWallet ServerWallet? @relation(fields: [serverWalletId], references: [id], onDelete: Cascade)
}

enum SessionStatus {
  ONRAMP_TRANSACTION_STATUS_IN_PROGRESS
  ONRAMP_TRANSACTION_STATUS_SUCCESS
  ONRAMP_TRANSACTION_STATUS_FAILED
}

enum ServerWalletType {
  CHAT
  AGENT
}

model ServerWallet {
  id         String           @id @default(uuid())
  userId     String
  walletName String           @unique
  type       ServerWalletType @default(CHAT)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  onrampSessions OnrampSession[]
}

enum Visibility {
  public
  private
}

model Chat {
  id                       String     @id @default(uuid())
  createdAt                DateTime   @default(now())
  title                    String
  userId                   String
  visibility               Visibility @default(private)
  lastContext              Json?
  userAgentConfigurationId String?
  activeStreamId           String?

  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages               Message[]
  userAgentConfiguration AgentConfigurationUser? @relation(fields: [userAgentConfigurationId], references: [id], onDelete: Cascade)
  toolCalls              ToolCall[]

  @@map("Chat")
}

model Message {
  id          String   @id @default(uuid()) @map("Message")
  chatId      String
  role        String
  parts       Json
  attachments Json
  createdAt   DateTime @default(now())

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("Message")
}

model ToolCall {
  id         String    @id @default(uuid())
  resourceId String
  createdAt  DateTime  @default(now())
  chatId     String
  resource   Resources @relation(fields: [resourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chat       Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model AgentConfiguration {
  id             String     @id @default(uuid())
  ownerId        String
  name           String
  model          String?
  description    String?
  image          String?
  systemPrompt   String
  starterPrompts String[]   @default([])
  visibility     Visibility @default(private)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  owner     User                         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  users     AgentConfigurationUser[]
  resources AgentConfigurationResource[]

  @@map("AgentConfiguration")
}

model AgentConfigurationResource {
  id                   String @id @default(uuid())
  resourceId           String
  agentConfigurationId String

  resource           Resources          @relation(fields: [resourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  agentConfiguration AgentConfiguration @relation(fields: [agentConfigurationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("AgentConfigurationResource")
}

model AgentConfigurationUser {
  id                   String @id @default(uuid())
  userId               String
  agentConfigurationId String

  joinedAt DateTime @default(now())

  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  agentConfiguration AgentConfiguration @relation(fields: [agentConfigurationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chats              Chat[]

  @@unique([userId, agentConfigurationId])
  @@map("AgentUser")
}

model Tag {
  id            String          @id @default(uuid())
  name          String          @unique
  color         String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  resourcesTags ResourcesTags[]

  @@map("Tag")
}

model ResourcesTags {
  id         String   @id @default(uuid())
  resourceId String
  tagId      String
  assignedAt DateTime @default(now())

  resource Resources @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  tag      Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([resourceId, tagId])
  @@map("ResourcesTags")
}

model ExcludedResource {
  id         String @id @default(uuid())
  resourceId String @unique

  resource Resources @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@map("ExcludedResource")
}

model UserAcknowledgement {
  id                     String   @id @default(uuid())
  userId                 String   @unique
  acknowledgedComposerAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("UserAcknowledgement")
}
